MelsecClientConfig config ;//= new MelsecClientConfig.Builder("172.28.12.8").setPort(8000).build();
    MelsecTcpClient client ;//= MelsecTcpClient.create3EBinary(config);
    
    public MelseClinet(AddressConfig address) {
    	config = new MelsecClientConfig.Builder(address.ip).
				setPort(address.port).build();
    	client = MelsecTcpClient.create3EBinary(config);
    }
    
	public static Client create(AddressConfig address) { 
		return new MelseClinet(address);
	}

	@Override
	public CompletableFuture<String> batchRead(AddressConfig address) {
		// TODO Auto-generated method stub
		CompletableFuture<String> future = new CompletableFuture<>();  
		client.batchRead(address.DataAddr, 2).thenAccept(response -> { 
			byte[] bt = response.array(); 
			for(int i=0;i<bt.length;i+=2) {
				byte t = bt[i];
				bt[i] = bt[i+1];
				bt[i+1]=t;
			}  
			String r = "";
			System.out.println(CRC16.bytesToHex(bt));
			System.out.println(bt.length);
			switch (address.DataModel) {
			case "bit":
				r = (bt[0]<<&1)+"";
			case "short":
				r = LittleByteUtil.getShort(bt)+"";
				break; 
			case "int":
				r = LittleByteUtil.getInt(bt)+"";
				break; 
			case "float": 
				r = LittleByteUtil.getFloat(bt)+"";
				break; 
			case "double": 
				r = LittleByteUtil.getDouble(bt)+"";
				break; 
			}
            future.complete(r);
        }); 
		
		return future;
	}

	@Override
	public CompletableFuture<Void> batchWrite(AddressConfig address, String data) {
		// TODO Auto-generated method stub
		CompletableFuture<Void> future = new CompletableFuture<>();
		ByteBuf dat = Unpooled.buffer(8);
        dat.writeBoolean(false);
        dat.writeBoolean(true);
        dat.writeBoolean(false);
        dat.writeBoolean(false);
        dat.writeBoolean(true);
        dat.writeBoolean(false);
        dat.writeBoolean(true);
        dat.writeBoolean(true); 
       client.batchWrite("M100", 8, dat) 
        .thenAccept(response -> {
            //System.out.println(ByteBufUtil.hexDump(response));
        	future.complete(null);
        }); 
		return future;
	}
